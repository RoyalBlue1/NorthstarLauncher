#pragma once
/*
This file has been generated by IDA.
It contains local type definitions from
the type library 'engine'
*/
typedef unsigned char _BYTE;
typedef unsigned int _DWORD;
typedef unsigned long long _QWORD;
typedef unsigned short _WORD;


struct Tricoll;
struct bspTexture;
struct CollPrimitive;
struct GridCell;
struct GeoSet;

/* 411 */
struct __declspec(align(8)) CCollisionBSPData
{
	_BYTE gap_0[96];
	int bspVersion;
	float float_64;
	float float_68;
	int int_6C;
	int int_70;
	int int_74;
	int int_78;
	_BYTE gap_7C[4];
	GridCell *gridCells;
	int int_88;
	int collisionGeoCount;
	void *collisionGeoSetBounds;
	GeoSet *collisionGeoSets;
	int int_A0;
	_BYTE gap_A4[4];
	void *collisionPrimBounds;
	CollPrimitive *collisionPrims;
	int *collision_unique_contents;
	int collisionPlanesCount;
	void *collisionPlanes;
	void *collBrushContents;
	int int_D8;
	_BYTE gap_DC[4];
	void *collBrushSidePlanes;
	void *collBrushSideProps;
	void *collBrushes;
	_BYTE gap_F8[4];
	_DWORD mapVertCount;
	Vector3 *mapVerts;
	int collBrushCount;
	int subModelCount;
	void *subModels;
	_DWORD tricollCount;
	Tricoll **tricollPointer;
	int int_128;
	_BYTE gap_12C[4];
	int int_130;
	_BYTE gap_134[4476];
	int int_12B0;
	_BYTE gap_12B4[4];
	_QWORD qword_12B8;
	_QWORD qword_12C0;
	_QWORD qword_12C8;
	_QWORD qword_12D0;
	_BYTE byte_12D8;
	_BYTE gap_12D9[15];
	int texturesCount;
	_QWORD textureStringData;
	bspTexture *textures;
};

/* 392 */


/* 405 */
struct Tricoll_Node
{
	__m128i m128i;
};

/* 406 */
struct Tricoll_Tri
{
	unsigned int val;
};

/* 407 */
struct Tricoll_Bevel_Start
{
	uint16_t val;
};

/* 408 */
struct Tricoll_Bevel_Indices
{
	uint8_t gap_0[4];
};

/* 409 */
struct __declspec(align(8)) Tricoll
{
	_WORD flags;
	_WORD texInfoFlags;
	_WORD texData;
	_WORD word6;
	_WORD vetCount;
	_WORD trisCount;
	_DWORD vertBaseIndex;
	Vector3 origin;
	float scale;
	char data;
};

struct CollPrimitive{
	char unique_contents;
	char index[2];
	char type;

};

struct GridCell
{
	short geoSetStart;
	short geoSetCount;

};

struct GeoSet{
	short straddleGroup;
	short primCount;
	unsigned int primStart;
};

/* 415 */
struct bspTexture
{
	const char *stringData;
	__int16 short_8;
	__int16 short_A;
	__int16 short_C;
	_BYTE gap_E[2];
};

Tricoll_Node* getTricollNodes(Tricoll* tricoll) {
	return (Tricoll_Node*) &tricoll->data;
}

Tricoll_Tri* getTricollTris(Tricoll* tricoll) {
	if(tricoll->trisCount > 3)
		return (Tricoll_Tri*)&getTricollNodes(tricoll)[(4i64 * ((tricoll->trisCount - (tricoll->trisCount + 3) % 6 + 5) / 2) - 4) / 3ui64];
	return (Tricoll_Tri*)&tricoll->data;
}

Tricoll_Bevel_Start* getTricollBevelStarts(Tricoll* tricoll) {
	return (Tricoll_Bevel_Start*)&getTricollTris(tricoll)[tricoll->trisCount];
}

Tricoll_Bevel_Indices* getTricollBevelIndices(Tricoll* tricoll) {
	return (Tricoll_Bevel_Indices*)&getTricollBevelStarts(tricoll)[tricoll->trisCount];
}
